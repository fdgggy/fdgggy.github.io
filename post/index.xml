<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on niep的博客</title>
    <link>http://www.fdgggy.com/post/</link>
    <description>Recent content in Posts on niep的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 17 Oct 2019 12:05:08 +0800</lastBuildDate>
    
	<atom:link href="http://www.fdgggy.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>内存管理</title>
      <link>http://www.fdgggy.com/2019/10/17/mem/</link>
      <pubDate>Thu, 17 Oct 2019 12:05:08 +0800</pubDate>
      
      <guid>http://www.fdgggy.com/2019/10/17/mem/</guid>
      <description>进程编译过程 一个c程序，编译时分为三步：预处理，编译，汇编，链接 预处理，展开头文件、宏替换，去掉注释，条件编译等 gcc -E hello.c -o hello.i 编译，使用编译器将预处理文件hello.i编译成汇编文件hello.s gcc -S hello.i -o hello.s 汇编,使用汇编器将hello.s编译成目标文件hello.o,二进制文件 gcc -c hello.s</description>
    </item>
    
    <item>
      <title>处理机调度</title>
      <link>http://www.fdgggy.com/2019/10/16/schedual/</link>
      <pubDate>Wed, 16 Oct 2019 12:05:08 +0800</pubDate>
      
      <guid>http://www.fdgggy.com/2019/10/16/schedual/</guid>
      <description>在多道程序环境下，主存中有着多个进程，其数目往往多余处理机数目。系统按照某种算法，动态的把处理机分配给就绪队列中的一个进程，使之执行。 高级调度，作业调度 根据某种算法，把外存上处于后备队列中的作业调入内存。 作业步骤 1.编译作业步，通过编译程序对源程序进行编译，产生若干个目标程序段 2</description>
    </item>
    
    <item>
      <title>进程管理</title>
      <link>http://www.fdgggy.com/2019/10/15/process/</link>
      <pubDate>Tue, 15 Oct 2019 12:05:08 +0800</pubDate>
      
      <guid>http://www.fdgggy.com/2019/10/15/process/</guid>
      <description>进程特征 结构 程序是一组有序指令的集合，静态的存放于某种介质。为使程序能独立运行，配置一进程控制块PCB(Process Control Block)，由程序段，数据段和PCB三部分便构成了进程实体。所谓创建进程，实质上是创建进程实体中的PCB，撤销进程，实质上是撤销进程的PCB 动态性 进程的实质是</description>
    </item>
    
    <item>
      <title>操作系统引论</title>
      <link>http://www.fdgggy.com/2019/10/13/yinlun/</link>
      <pubDate>Sun, 13 Oct 2019 12:05:08 +0800</pubDate>
      
      <guid>http://www.fdgggy.com/2019/10/13/yinlun/</guid>
      <description>概述 计算机系统由硬件和软件组成。从用户角度，OS是用户与计算机硬件系统间的接口。从资源管理角度，OS是计算机系统资源管理者。OS实现对计算机资源的抽象，隐藏了操作细节，更方便的使用机器。 操作系统目标 系统资源 处理器 存储器 I/O设备 1.提高系统资源利用率和吞吐量 未配置OS的计算机系统</description>
    </item>
    
    <item>
      <title>复杂度分析(上)</title>
      <link>http://www.fdgggy.com/2019/07/17/complexity/</link>
      <pubDate>Wed, 17 Jul 2019 12:05:08 +0800</pubDate>
      
      <guid>http://www.fdgggy.com/2019/07/17/complexity/</guid>
      <description>数据结构与算法 数据结构是指一组数据的存储结构 算法就是操作数据的方法 数据结构和算法是相辅相成的，数据结构是为算法服务的，而算法要作用在特定的数据结构上 重点 数据结构和算法解决的是如何更省，更快的存储和处理数据，因此需要一个考量效率和资源消耗的方法，这就是复杂度分析方法。 学习数据结构与</description>
    </item>
    
    <item>
      <title>Linux 源码解析网络编程--socket,bind</title>
      <link>http://www.fdgggy.com/2019/07/16/socket/</link>
      <pubDate>Tue, 16 Jul 2019 12:05:08 +0800</pubDate>
      
      <guid>http://www.fdgggy.com/2019/07/16/socket/</guid>
      <description>scoket() 作用：创建一个通信端点并返回一个引用该端点的文件描述符 int socket(int domain, int type, int protocol); 参数： @domain(协议域),用于通信的协议簇,如: @type 套接字类型，制定通信的语义,如: SOCK_STREAM 有序，可靠，双向，基于连接的字节流 TCP SOCK_DGRAM 数据报,无连接，不可靠，具有固定最大长度 UDP @protocol 协议类型常值,一般设为0，系统设定do</description>
    </item>
    
    <item>
      <title>Linux 源码解析网络编程-listen</title>
      <link>http://www.fdgggy.com/2019/07/16/listen/</link>
      <pubDate>Tue, 16 Jul 2019 12:05:08 +0800</pubDate>
      
      <guid>http://www.fdgggy.com/2019/07/16/listen/</guid>
      <description>listen() int listen(int sockfd, int backlog); 作用：监听套接字上的链接 @sockfd 引用SOCK_STREAM/SOCK_SEQPACKET类型套接字的文件描述符 @backlog 挂起连接的队列的最大长度, ***ddos攻击有关 linux 内核源码 /* * Perform a listen. Basically, we allow the protocol to do anything * necessary for a listen, and if that works, we mark the socket as * ready for listening. */ SYSCALL_DEFINE2(listen, int, fd, int, backlog) { struct socket *sock; int err, fput_needed; int somaxconn; //通过文件</description>
    </item>
    
    <item>
      <title>Linux 源码解析网络编程-I/O模型详解</title>
      <link>http://www.fdgggy.com/2019/07/15/io_model/</link>
      <pubDate>Mon, 15 Jul 2019 12:05:08 +0800</pubDate>
      
      <guid>http://www.fdgggy.com/2019/07/15/io_model/</guid>
      <description>I/O模型 阻塞式I/O模型 socket套接字默认是阻塞的，如果I/O条件未满足，则进程或线程就会被挂起，直到I/O条件满足才返回。常用的IO操作都是阻塞I/O，如read一个已连接的套接字时，如果没有数据，那么就会挂起进程，阻塞等待，直到有数据可读时才返回。 如果采用阻塞式I/O做</description>
    </item>
    
    <item>
      <title>移动端断线重连方案</title>
      <link>http://www.fdgggy.com/2019/07/12/reconnect/</link>
      <pubDate>Fri, 12 Jul 2019 12:05:08 +0800</pubDate>
      
      <guid>http://www.fdgggy.com/2019/07/12/reconnect/</guid>
      <description>一、背景 移动平台下，网络信号变动非常频繁，造成更高的丢包率，更大的延迟抖动，不稳定的网络连接，处理不好，会造成很不好的游戏体验 二、场景 1.2G/3G/4G/WIFI 相互切换时client的IP变化. 2.地理位置变化导致网络制式的转换，手机基站之间的切换. 3.手机HOME/电源键，电话进来. 4.建筑死角，隧道</description>
    </item>
    
  </channel>
</rss>