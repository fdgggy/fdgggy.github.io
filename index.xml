<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>niep的博客</title>
    <link>http://www.fdgggy.com/</link>
    <description>Recent content on niep的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 17 Nov 2019 22:05:08 +0800</lastBuildDate>
    
	<atom:link href="http://www.fdgggy.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>应用层</title>
      <link>http://www.fdgggy.com/2019/11/17/yingyongceng/</link>
      <pubDate>Sun, 17 Nov 2019 22:05:08 +0800</pubDate>
      
      <guid>http://www.fdgggy.com/2019/11/17/yingyongceng/</guid>
      <description>HTTP 诞生背景 初衷是为知识共享，提供一种能让远隔两地的研究者们共享知识的途径。 基本理念是借助多文档之间相互关联形成的超文本HyperText，连成可相互参阅的WWW(World Wide Web,万维网)，WWW是Web浏览器当年用来浏览超文本的客户端应用程序的名称，现在用来表示这一系列的集合</description>
    </item>
    
    <item>
      <title>传输层</title>
      <link>http://www.fdgggy.com/2019/11/17/chuanshuceng/</link>
      <pubDate>Sun, 17 Nov 2019 21:05:08 +0800</pubDate>
      
      <guid>http://www.fdgggy.com/2019/11/17/chuanshuceng/</guid>
      <description>概述 传输层用于高效的传输应用数据，并且能控制不同协议的通信要求。TCP提供可靠的通信传输，UDP则是让广播和细节控制交给应用。 端口号 识别同一台计算机中进行通信的不同应用程序，因此，也称为程序的地址。 分配端口号 知名端口号一般由0-1023的数字，还有一些端口号也被注册1024-49</description>
    </item>
    
    <item>
      <title>网络层</title>
      <link>http://www.fdgggy.com/2019/11/17/wangluoceng/</link>
      <pubDate>Sun, 17 Nov 2019 20:05:08 +0800</pubDate>
      
      <guid>http://www.fdgggy.com/2019/11/17/wangluoceng/</guid>
      <description>概述 网络层将不同的网段中的节点连接起来，实现点对点的通信。数据链路层只是将同一网段中的节点连接在一起。网络层负责将数据链路层中形成的网段拼接起来，使不同网段中不相邻节点彼此通信。 IP协议 网际协议，属于OSI参考模型从下往上的第三层，网络层。这一层主要由IP和ICMP两个协议组成，</description>
    </item>
    
    <item>
      <title>数据链路层</title>
      <link>http://www.fdgggy.com/2019/11/17/lianluceng/</link>
      <pubDate>Sun, 17 Nov 2019 16:05:08 +0800</pubDate>
      
      <guid>http://www.fdgggy.com/2019/11/17/lianluceng/</guid>
      <description>概述 物理层上方的一种能正确且稳定的传输比特流的结构 ，能生成通往相邻设备的逻辑传输路径(数据链路)，并检查其中的传输错误并修复 数据链路层将来自网络层的数据包封装成帧后交给物理层 1、为网络层IP模块发送和接收IP数据报 2、为网络层ARP模块发送ARP请求和接收ARP应答 数据链路层接收</description>
    </item>
    
    <item>
      <title>物理层</title>
      <link>http://www.fdgggy.com/2019/11/17/wuliceng/</link>
      <pubDate>Sun, 17 Nov 2019 12:05:08 +0800</pubDate>
      
      <guid>http://www.fdgggy.com/2019/11/17/wuliceng/</guid>
      <description>概述 物理层规定了数据在传输媒介(线缆)中的流动规则，并对物理性质做了规定，如线缆材质，连接器形状，pin的接法。 物理层接收由数据链路层发送的由0和1构成的数据帧，并将它们转换为电信号或光信号。 可以把LAN网线看成物理层，无线LAN就把信号理解成物理层。 标准规格 物理层的标准化是和数</description>
    </item>
    
    <item>
      <title>内存管理</title>
      <link>http://www.fdgggy.com/2019/10/17/mem/</link>
      <pubDate>Thu, 17 Oct 2019 12:05:08 +0800</pubDate>
      
      <guid>http://www.fdgggy.com/2019/10/17/mem/</guid>
      <description>进程编译过程 一个c程序，编译时分为三步：预处理，编译，汇编，链接 预处理，展开头文件、宏替换，去掉注释，条件编译等 gcc -E hello.c -o hello.i 编译，使用编译器将预处理文件hello.i编译成汇编文件hello.s gcc -S hello.i -o hello.s 汇编,使用汇编器将hello.s编译成目标文件hello.o,二进制文件 gcc -c hello.s</description>
    </item>
    
    <item>
      <title>处理机调度</title>
      <link>http://www.fdgggy.com/2019/10/16/schedual/</link>
      <pubDate>Wed, 16 Oct 2019 12:05:08 +0800</pubDate>
      
      <guid>http://www.fdgggy.com/2019/10/16/schedual/</guid>
      <description>在多道程序环境下，主存中有着多个进程，其数目往往多余处理机数目。系统按照某种算法，动态的把处理机分配给就绪队列中的一个进程，使之执行。 高级调度，作业调度 根据某种算法，把外存上处于后备队列中的作业调入内存。 作业步骤 1.编译作业步，通过编译程序对源程序进行编译，产生若干个目标程序段 2</description>
    </item>
    
    <item>
      <title>进程管理</title>
      <link>http://www.fdgggy.com/2019/10/15/process/</link>
      <pubDate>Tue, 15 Oct 2019 12:05:08 +0800</pubDate>
      
      <guid>http://www.fdgggy.com/2019/10/15/process/</guid>
      <description>进程特征 结构 程序是一组有序指令的集合，静态的存放于某种介质。为使程序能独立运行，配置一进程控制块PCB(Process Control Block)，由程序段，数据段和PCB三部分便构成了进程实体。所谓创建进程，实质上是创建进程实体中的PCB，撤销进程，实质上是撤销进程的PCB 动态性 进程的实质是</description>
    </item>
    
    <item>
      <title>操作系统引论</title>
      <link>http://www.fdgggy.com/2019/10/13/yinlun/</link>
      <pubDate>Sun, 13 Oct 2019 12:05:08 +0800</pubDate>
      
      <guid>http://www.fdgggy.com/2019/10/13/yinlun/</guid>
      <description>概述 计算机系统由硬件和软件组成。从用户角度，OS是用户与计算机硬件系统间的接口。从资源管理角度，OS是计算机系统资源管理者。OS实现对计算机资源的抽象，隐藏了操作细节，更方便的使用机器。 操作系统目标 系统资源 处理器 存储器 I/O设备 1.提高系统资源利用率和吞吐量 未配置OS的计算机系统</description>
    </item>
    
    <item>
      <title>unity3d资源管理</title>
      <link>http://www.fdgggy.com/2019/09/18/absystem/</link>
      <pubDate>Wed, 18 Sep 2019 12:05:08 +0800</pubDate>
      
      <guid>http://www.fdgggy.com/2019/09/18/absystem/</guid>
      <description>一、Assetbundle原理 简介 参考：https://blog.csdn.net/lodypig/article/category/6315960 https://zhuanlan.zhihu.com/p/25683486 https://www.jianshu.com/p/2a7c4a48aaee http://blog.shuiguzi.com/categories/UnityKB/ https://blog.csdn.net/swj524152416/article/details/73348296 http://blog.shuiguzi.com/2017/04/18/AssetBundle_usage_pattern_1/ https://blog.csdn.net/qq_33337811/article/details/73849019 UWA 上面很多AB方面的干货 https://blog.uwa4d.com/archives/ABTheory.html 内存优化：https://blog.csdn.net/gtofei013/article/de</description>
    </item>
    
    <item>
      <title>unity3d的ui适配方案</title>
      <link>http://www.fdgggy.com/2019/09/16/uiscaler/</link>
      <pubDate>Mon, 16 Sep 2019 12:05:08 +0800</pubDate>
      
      <guid>http://www.fdgggy.com/2019/09/16/uiscaler/</guid>
      <description>分辨率 显示分辨率 概念 屏幕图像的精密度，显示器所能显示的像素数量。 - 显示分辨率一定的情况下，显示屏越小(ppi越高)图像越清晰。 - 显示屏大小固定，显示分辨率越高(ppi越高)图像越清晰。 单位 dpi 点每英寸 lpi 线每英寸 ppi 像素每英寸 图像分辨率 单位英寸中所包含的像素点数，单位为ppi，像素每英</description>
    </item>
    
    <item>
      <title>unity内存管理及优化</title>
      <link>http://www.fdgggy.com/2019/09/10/memmgr/</link>
      <pubDate>Tue, 10 Sep 2019 18:05:08 +0800</pubDate>
      
      <guid>http://www.fdgggy.com/2019/09/10/memmgr/</guid>
      <description>unity为什么能跨平台 参考：https://segmentfault.com/a/1190000004355051 MONO CLI 通用语言基础架构，是一个技术规范，定义了与语言无关的跨体系结构的运行环境。开发者只需要按照规范内各种高级语言来开发软件，即可实现跨平台。规范中包括CIL，可读性</description>
    </item>
    
    <item>
      <title>详解unity各平台资源加载</title>
      <link>http://www.fdgggy.com/2019/09/16/resource/</link>
      <pubDate>Tue, 10 Sep 2019 12:05:08 +0800</pubDate>
      
      <guid>http://www.fdgggy.com/2019/09/16/resource/</guid>
      <description>相信大家在基于Unity3d开发游戏时会对各种平台资源加载方式会有疑惑，至少我曾经就有这样的疑惑，这里分享出来。 一、Resources目录加载 Resources.Load() 只能加载Resources目录的资源，可以有多个子Resources目录。 加载资源方式可以是同步或异步。 Resources目录是Unit</description>
    </item>
    
    <item>
      <title>复杂度分析(上)</title>
      <link>http://www.fdgggy.com/2019/07/17/complexity/</link>
      <pubDate>Wed, 17 Jul 2019 12:05:08 +0800</pubDate>
      
      <guid>http://www.fdgggy.com/2019/07/17/complexity/</guid>
      <description>数据结构与算法 数据结构是指一组数据的存储结构 算法就是操作数据的方法 数据结构和算法是相辅相成的，数据结构是为算法服务的，而算法要作用在特定的数据结构上 重点 数据结构和算法解决的是如何更省，更快的存储和处理数据，因此需要一个考量效率和资源消耗的方法，这就是复杂度分析方法。 学习数据结构与</description>
    </item>
    
    <item>
      <title>Linux 源码解析网络编程--socket,bind</title>
      <link>http://www.fdgggy.com/2019/07/16/socket/</link>
      <pubDate>Tue, 16 Jul 2019 12:05:08 +0800</pubDate>
      
      <guid>http://www.fdgggy.com/2019/07/16/socket/</guid>
      <description>scoket() 作用：创建一个通信端点并返回一个引用该端点的文件描述符 int socket(int domain, int type, int protocol); 参数： @domain(协议域),用于通信的协议簇,如: @type 套接字类型，制定通信的语义,如: SOCK_STREAM 有序，可靠，双向，基于连接的字节流 TCP SOCK_DGRAM 数据报,无连接，不可靠，具有固定最大长度 UDP @protocol 协议类型常值,一般设为0，系统设定do</description>
    </item>
    
    <item>
      <title>Linux 源码解析网络编程-listen</title>
      <link>http://www.fdgggy.com/2019/07/16/listen/</link>
      <pubDate>Tue, 16 Jul 2019 12:05:08 +0800</pubDate>
      
      <guid>http://www.fdgggy.com/2019/07/16/listen/</guid>
      <description>listen() int listen(int sockfd, int backlog); 作用：监听套接字上的链接 @sockfd 引用SOCK_STREAM/SOCK_SEQPACKET类型套接字的文件描述符 @backlog 挂起连接的队列的最大长度, ***ddos攻击有关 linux 内核源码 /* * Perform a listen. Basically, we allow the protocol to do anything * necessary for a listen, and if that works, we mark the socket as * ready for listening. */ SYSCALL_DEFINE2(listen, int, fd, int, backlog) { struct socket *sock; int err, fput_needed; int somaxconn; //通过文件</description>
    </item>
    
    <item>
      <title>Linux 源码解析网络编程-I/O模型详解</title>
      <link>http://www.fdgggy.com/2019/07/15/io_model/</link>
      <pubDate>Mon, 15 Jul 2019 12:05:08 +0800</pubDate>
      
      <guid>http://www.fdgggy.com/2019/07/15/io_model/</guid>
      <description>I/O模型 阻塞式I/O模型 socket套接字默认是阻塞的，如果I/O条件未满足，则进程或线程就会被挂起，直到I/O条件满足才返回。常用的IO操作都是阻塞I/O，如read一个已连接的套接字时，如果没有数据，那么就会挂起进程，阻塞等待，直到有数据可读时才返回。 如果采用阻塞式I/O做</description>
    </item>
    
    <item>
      <title>移动端断线重连方案</title>
      <link>http://www.fdgggy.com/2019/07/12/reconnect/</link>
      <pubDate>Fri, 12 Jul 2019 12:05:08 +0800</pubDate>
      
      <guid>http://www.fdgggy.com/2019/07/12/reconnect/</guid>
      <description>一、背景 移动平台下，网络信号变动非常频繁，造成更高的丢包率，更大的延迟抖动，不稳定的网络连接，处理不好，会造成很不好的游戏体验 二、场景 1.2G/3G/4G/WIFI 相互切换时client的IP变化. 2.地理位置变化导致网络制式的转换，手机基站之间的切换. 3.手机HOME/电源键，电话进来. 4.建筑死角，隧道</description>
    </item>
    
    <item>
      <title>关于我</title>
      <link>http://www.fdgggy.com/about/</link>
      <pubDate>Thu, 11 Jul 2019 09:46:07 +0800</pubDate>
      
      <guid>http://www.fdgggy.com/about/</guid>
      <description>大家好，我是 niep，是一名程序员。 我的技能 编程语言: Go, Lua, C#, Javasript, C++, Python, Php 游戏引擎: Unity3d, Creator 服务器引擎: Skynet, MatchVS 生活中的我 骑行。 爱折腾。 喜欢思考，相信技术能够改变世界。 系列文章 一些链接 我的独立博客：fdgggy.com Github: https://github.com/fdgggy Email：359461238@qq.com 微信号：szzoujian 声</description>
    </item>
    
    <item>
      <title>归档</title>
      <link>http://www.fdgggy.com/archives/</link>
      <pubDate>Thu, 11 Jul 2019 09:46:07 +0800</pubDate>
      
      <guid>http://www.fdgggy.com/archives/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>